// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: myApiTwo.proto

package pkg

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MySecondApi_ThirdGetRpc_FullMethodName  = "/routes.MySecondApi/ThirdGetRpc"
	MySecondApi_FourthGetRpc_FullMethodName = "/routes.MySecondApi/FourthGetRpc"
)

// MySecondApiClient is the client API for MySecondApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MySecondApiClient interface {
	ThirdGetRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	FourthGetRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
}

type mySecondApiClient struct {
	cc grpc.ClientConnInterface
}

func NewMySecondApiClient(cc grpc.ClientConnInterface) MySecondApiClient {
	return &mySecondApiClient{cc}
}

func (c *mySecondApiClient) ThirdGetRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, MySecondApi_ThirdGetRpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mySecondApiClient) FourthGetRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, MySecondApi_FourthGetRpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MySecondApiServer is the server API for MySecondApi service.
// All implementations must embed UnimplementedMySecondApiServer
// for forward compatibility
type MySecondApiServer interface {
	ThirdGetRpc(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error)
	FourthGetRpc(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error)
	mustEmbedUnimplementedMySecondApiServer()
}

// UnimplementedMySecondApiServer must be embedded to have forward compatible implementations.
type UnimplementedMySecondApiServer struct {
}

func (UnimplementedMySecondApiServer) ThirdGetRpc(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ThirdGetRpc not implemented")
}
func (UnimplementedMySecondApiServer) FourthGetRpc(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FourthGetRpc not implemented")
}
func (UnimplementedMySecondApiServer) mustEmbedUnimplementedMySecondApiServer() {}

// UnsafeMySecondApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MySecondApiServer will
// result in compilation errors.
type UnsafeMySecondApiServer interface {
	mustEmbedUnimplementedMySecondApiServer()
}

func RegisterMySecondApiServer(s grpc.ServiceRegistrar, srv MySecondApiServer) {
	s.RegisterService(&MySecondApi_ServiceDesc, srv)
}

func _MySecondApi_ThirdGetRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySecondApiServer).ThirdGetRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MySecondApi_ThirdGetRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySecondApiServer).ThirdGetRpc(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MySecondApi_FourthGetRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MySecondApiServer).FourthGetRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MySecondApi_FourthGetRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MySecondApiServer).FourthGetRpc(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MySecondApi_ServiceDesc is the grpc.ServiceDesc for MySecondApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MySecondApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "routes.MySecondApi",
	HandlerType: (*MySecondApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ThirdGetRpc",
			Handler:    _MySecondApi_ThirdGetRpc_Handler,
		},
		{
			MethodName: "FourthGetRpc",
			Handler:    _MySecondApi_FourthGetRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "myApiTwo.proto",
}
