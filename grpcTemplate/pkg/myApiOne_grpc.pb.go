// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: myApiOne.proto

package pkg

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MyFirstApi_FirstGetRpc_FullMethodName  = "/routes.MyFirstApi/FirstGetRpc"
	MyFirstApi_SecondGetRpc_FullMethodName = "/routes.MyFirstApi/SecondGetRpc"
)

// MyFirstApiClient is the client API for MyFirstApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyFirstApiClient interface {
	FirstGetRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	SecondGetRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
}

type myFirstApiClient struct {
	cc grpc.ClientConnInterface
}

func NewMyFirstApiClient(cc grpc.ClientConnInterface) MyFirstApiClient {
	return &myFirstApiClient{cc}
}

func (c *myFirstApiClient) FirstGetRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, MyFirstApi_FirstGetRpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myFirstApiClient) SecondGetRpc(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, MyFirstApi_SecondGetRpc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyFirstApiServer is the server API for MyFirstApi service.
// All implementations must embed UnimplementedMyFirstApiServer
// for forward compatibility
type MyFirstApiServer interface {
	FirstGetRpc(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error)
	SecondGetRpc(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error)
	mustEmbedUnimplementedMyFirstApiServer()
}

// UnimplementedMyFirstApiServer must be embedded to have forward compatible implementations.
type UnimplementedMyFirstApiServer struct {
}

func (UnimplementedMyFirstApiServer) FirstGetRpc(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FirstGetRpc not implemented")
}
func (UnimplementedMyFirstApiServer) SecondGetRpc(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecondGetRpc not implemented")
}
func (UnimplementedMyFirstApiServer) mustEmbedUnimplementedMyFirstApiServer() {}

// UnsafeMyFirstApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyFirstApiServer will
// result in compilation errors.
type UnsafeMyFirstApiServer interface {
	mustEmbedUnimplementedMyFirstApiServer()
}

func RegisterMyFirstApiServer(s grpc.ServiceRegistrar, srv MyFirstApiServer) {
	s.RegisterService(&MyFirstApi_ServiceDesc, srv)
}

func _MyFirstApi_FirstGetRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyFirstApiServer).FirstGetRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyFirstApi_FirstGetRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyFirstApiServer).FirstGetRpc(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MyFirstApi_SecondGetRpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyFirstApiServer).SecondGetRpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MyFirstApi_SecondGetRpc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyFirstApiServer).SecondGetRpc(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// MyFirstApi_ServiceDesc is the grpc.ServiceDesc for MyFirstApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MyFirstApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "routes.MyFirstApi",
	HandlerType: (*MyFirstApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FirstGetRpc",
			Handler:    _MyFirstApi_FirstGetRpc_Handler,
		},
		{
			MethodName: "SecondGetRpc",
			Handler:    _MyFirstApi_SecondGetRpc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "myApiOne.proto",
}
